<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- 使用注解形式配置 -->
	<context:annotation-config/>
	<context:component-scan base-package="com.school"/>
	
	<bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_UPPERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterSecurityInterceptor
			</value>
		</property>
	</bean>
	<!--
		每次request前
		HttpSessionContextIntegrationFilter从Session中获取Authentication对象，在request完后
		又把Authentication对象保存到Session中供下次request使用,此filter必须其他Acegi filter前使用
	-->
	<bean id="httpSessionContextIntegrationFilter"
		class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />
	<!--
		和servlet spec差不多,处理登陆请求 authenticationFailureUrl定义登陆失败时转向的页面
		defaultTargetUrl定义登陆成功时转向的页面 filterProcessesUrl定义登陆请求的页面
	-->
	<bean id="authenticationProcessingFilter"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureUrl" value="/login.html?login_error=1" />
		<property name="defaultTargetUrl" value="/main.html" />
		<property name="filterProcessesUrl" value="/loginCheck.htm" />
	</bean>
	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider" />
				<ref local="anonymousAuthenticationProvider" />
			</list>
		</property>
	</bean>

	<bean id="daoAuthenticationProvider"
		class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="passwordEncoder">
			<bean class="org.acegisecurity.providers.encoding.Md5PasswordEncoder" >
				<!-- false 表示：生成32位的Hex版, 这也是encodeHashAsBase64的,
                   Acegi 默认配置; true  表示：生成24位的Base64版
-->  
            <property name="encodeHashAsBase64" value="false" />  
			</bean>
		</property>
		 <property name="saltSource">  
	        <bean class="org.acegisecurity.providers.dao.salt.SystemWideSaltSource">  
	            <property name="systemWideSalt" value="wyytxml,clybq"/>  
	        </bean>  
    	</property>  
	</bean>

	<bean id="userDetailsService" class="com.school.Acegi.UserLoginServiceImpl"></bean>

	<!--
		<bean id="userDetailsService"
		class="org.acegisecurity.userdetails.jdbc.JdbcDaoImpl"> <property
		name="dataSource" ref="dataSource" /> <property
		name="usersByUsernameQuery"> <value> SELECT loginname,passwd,1 FROM
		userinfo WHERE loginname = ? </value> </property> <property
		name="authoritiesByUsernameQuery"> <value> SELECT loginname,'PRIV_1'
		FROM userinfo WHERE loginname = ? </value> </property> </bean>
	-->
	<!--
		filterSecurityInterceptor在执行转向url前检查objectDefinitionSource中设定的用户权限信息
		过程：
		首先，objectDefinitionSource中定义了访问URL需要的属性信息(这里的属性信息仅仅是标志，告诉accessDecisionManager要用哪些voter来投票)
		然后，authenticationManager调用自己的provider来对用户的认证信息进行校验。
		最后，有投票者根据用户持有认证和访问url需要的属性，调用自己的voter来投票，决定是否允许访问。
	-->
	<bean id="filterSecurityInterceptor"
		class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="objectDefinitionSource">
			<value>
				CONVERT_URL_TO_UPPERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				
				/css/**=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/image/**=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/js/**=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/favicon.ico=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/login.html=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/loginView.html=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/exit.html=PRIV_ANONYMOUS,PRIV_1,PRIV_0,PRIV_ERROR
				/main.html=PRIV_0,PRIV_1,PRIV_ERROR
				/saveEnterStudent.html=PRIV_0
				/**=PRIV_1
			</value>
		</property>
	</bean>
	<!--
		经过投票机制来决定是否可以访问某一资源(URL或方法)
		allowIfAllAbstainDecisions为false时如果有一个或以上的decisionVoters投票通过,则授权通过
		可选的决策机制： ConsensusBased UnanimousBased
	-->
	<bean id="accessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
			</list>
		</property>
	</bean>
	<!--必须是以rolePrefix设定的value开头的才会进行投票,否则为弃权-->
	<bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter">
		<property name="rolePrefix" value="PRIV_" />
	</bean>


	<!--
		如果不存在任何授权信息时，自动添加匿名用户身份至SecurityContextHolder中
	-->
	<bean id="anonymousProcessingFilter"
		class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="anonymousUser" />
		<property name="userAttribute" value="ANONYMOUSUSER,PRIV_ANONYMOUS" />
	</bean>
	<bean id="anonymousAuthenticationProvider"
		class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
		<property name="key" value="anonymousUser" />
	</bean>

	<!-- 
		监听成功登录事件
	
	<bean class="com.school.service.LoginSuccessListener"></bean>
	-->


	<!--
		异常转换过滤器，主要是处理AccessDeniedException和AuthenticationException，将给每个异常找到合适的"去向"
	-->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<ref local="authenticationProcessingFilterEntryPoint" />
		</property>
		<property name="accessDeniedHandler">
			<bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/login.html" />
			</bean>
		</property>
	</bean>
	<!-- 当AccessDeniedException且存在anonymous user时触发 -->
	<bean id="authenticationProcessingFilterEntryPoint"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl">
			<value>/login.html</value>
		</property>
	</bean>
	<!-- 
	<bean id="startThread" class="com.jf.instruction.service.impl.StartThread">
		<property name="initialization" ref="initialization"></property>
	</bean>
	 -->
	 
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<bean id="serviceDaoTarget" class="com.school.service.ServiceDaoImpl"></bean>
	<bean id="serviceDao"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="target" ref="serviceDaoTarget"></property>
		<property name="transactionAttributes">
			<props>
			
			</props>
		</property>
	</bean>

	<!-- web service -->
	<import resource="classpath:org/codehaus/xfire/spring/xfire.xml"/>
	<bean id="schoolService" class="org.codehaus.xfire.spring.remoting.XFireExporter">
		<property name="serviceFactory" ref="xfire.serviceFactory"></property>
		<property name="xfire" ref="xfire"></property>
		<property name="serviceBean" ref="serviceDaoTarget"></property>
		<property name="serviceClass" value="com.school.service.ServiceDao"></property>
		<property name="name" value="school"></property>
		
	</bean>
	<!-- end web service -->
</beans>